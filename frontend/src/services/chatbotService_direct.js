import { GoogleGenerativeAI } from "@google/generative-ai";

class GamingChatbot {
  constructor() {
    this.genAI = null;
    this.model = null;
    this.chatHistory = [];
    this.initializeModel();
  }

  initializeModel() {
    try {
      if (!process.env.REACT_APP_GEMINI_API_KEY) {
        throw new Error("GEMINI_API_KEY not found in environment variables");
      }

      this.genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);
      this.model = this.genAI.getGenerativeModel({
        model: "gemini-1.5-flash",
        generationConfig: {
          temperature: 0.7,
          topK: 1,
          topP: 1,
          maxOutputTokens: 500,
        },
      });

      console.log("‚úÖ Gaming Chatbot initialized successfully");
    } catch (error) {
      console.error("‚ùå Failed to initialize chatbot:", error);
      throw new Error("Chatbot initialization failed: " + error.message);
    }
  }

  getSystemPrompt() {
    return `B·∫°n l√† tr·ª£ l√Ω AI chuy√™n nghi·ªáp cho c·ª≠a h√†ng Gaming Gear Shop.

NHI·ªÜM V·ª§ C·ª¶A B·∫†N:
- T∆∞ v·∫•n s·∫£n ph·∫©m gaming (chu·ªôt, b√†n ph√≠m, tai nghe, m√†n h√¨nh, laptop gaming)
- Gi√∫p kh√°ch h√†ng ch·ªçn setup gaming ph√π h·ª£p v·ªõi budget v√† nhu c·∫ßu
- Tr·∫£ l·ªùi v·ªÅ th√¥ng s·ªë k·ªπ thu·∫≠t v√† so s√°nh s·∫£n ph·∫©m
- T∆∞ v·∫•n v·ªÅ combo gaming v√† c√°c ∆∞u ƒë√£i
- H·ªó tr·ª£ troubleshooting c∆° b·∫£n cho thi·∫øt b·ªã gaming

PHONG C√ÅCH TR·∫¢ L·ªúI:
- Th√¢n thi·ªán, nhi·ªát t√¨nh nh∆∞ m·ªôt gamer chuy√™n nghi·ªáp
- S·ª≠ d·ª•ng thu·∫≠t ng·ªØ gaming ph√π h·ª£p nh∆∞ng d·ªÖ hi·ªÉu
- ƒê∆∞a ra g·ª£i √Ω c·ª• th·ªÉ v√† th·ª±c t·∫ø
- Lu√¥n h·ªèi th√™m v·ªÅ budget v√† m·ª•c ƒë√≠ch s·ª≠ d·ª•ng
- Tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu

KI·∫æN TH·ª®C S·∫¢N PH·∫®M:
- Chu·ªôt gaming: DPI, polling rate, sensor optical/laser, lo·∫°i switch
- B√†n ph√≠m: mechanical vs membrane, c√°c lo·∫°i switch (Cherry MX, Gateron, Outemu)
- Tai nghe: driver size, frequency response, surround sound, microphone quality
- M√†n h√¨nh: refresh rate (60Hz, 144Hz, 240Hz), response time, panel types (IPS, TN, VA)
- Laptop gaming: GPU (RTX 3060, 4060, 4070), CPU, RAM, storage SSD

TH∆Ø∆†NG HI·ªÜU PH·ªî BI·∫æN:
- Chu·ªôt: Logitech, Razer, SteelSeries, Corsair
- B√†n ph√≠m: Corsair, Razer, Logitech, Keychron
- Tai nghe: SteelSeries, HyperX, Razer, Audio-Technica
- M√†n h√¨nh: ASUS, MSI, AOC, Samsung
- Laptop: ASUS ROG, MSI Gaming, Acer Predator, HP Omen

L∆ØU √ù: N·∫øu kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ th√¥ng tin c·ª• th·ªÉ, h√£y th·ª´a nh·∫≠n v√† ƒë·ªÅ xu·∫•t li√™n h·ªá nh√¢n vi√™n t∆∞ v·∫•n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ chi ti·∫øt h∆°n.`;
  }

  async sendMessage(message) {
    try {
      if (!this.model) {
        throw new Error("Chatbot not initialized");
      }

      // T·∫°o context t·ª´ l·ªãch s·ª≠ chat
      const conversationHistory = this.chatHistory
        .map((msg) => `${msg.role}: ${msg.content}`)
        .join("\n");

      const fullPrompt = `${this.getSystemPrompt()}

L·ªäCH S·ª¨ TR√í CHUY·ªÜN:
${conversationHistory}

KH√ÅCH H√ÄNG: ${message}

TR·ª¢ L√ù:`;

      const result = await this.model.generateContent(fullPrompt);
      const response = await result.response;
      const botReply = response.text();

      // L∆∞u v√†o l·ªãch s·ª≠
      this.chatHistory.push(
        { role: "KH√ÅCH H√ÄNG", content: message },
        { role: "TR·ª¢ L√ù", content: botReply }
      );

      // Gi·ªõi h·∫°n l·ªãch s·ª≠ (gi·ªØ 10 tin nh·∫Øn g·∫ßn nh·∫•t)
      if (this.chatHistory.length > 10) {
        this.chatHistory = this.chatHistory.slice(-10);
      }

      return {
        success: true,
        message: botReply,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      console.error("‚ùå Error sending message:", error);

      // Handle specific error types
      let errorMessage = "Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.";

      if (
        error.message.includes("API_KEY") ||
        error.message.includes("GEMINI_API_KEY")
      ) {
        errorMessage = "L·ªói c·∫•u h√¨nh API. Vui l√≤ng ki·ªÉm tra API key.";
      } else if (
        error.message.includes("QUOTA_EXCEEDED") ||
        error.message.includes("quota")
      ) {
        errorMessage = "H·ªá th·ªëng ƒëang qu√° t·∫£i. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.";
      } else if (
        error.message.includes("RATE_LIMIT") ||
        error.message.includes("rate")
      ) {
        errorMessage = "B·∫°n g·ª≠i tin nh·∫Øn h∆°i nhanh r·ªìi! Ch·ªù ch√∫t nh√© üòä";
      } else if (
        error.message.includes("404") ||
        error.message.includes("not found")
      ) {
        errorMessage = "ƒêang c√≥ s·ª± c·ªë v·ªõi AI model. Vui l√≤ng th·ª≠ l·∫°i sau.";
      }

      return {
        success: false,
        message: errorMessage,
        error: error.message,
        timestamp: new Date().toISOString(),
      };
    }
  }

  clearMemory() {
    this.chatHistory = [];
    console.log("üßπ Chat memory cleared");
  }

  async getQuickSuggestions() {
    const suggestions = [
      "T∆∞ v·∫•n chu·ªôt gaming d∆∞·ªõi 1 tri·ªáu",
      "So s√°nh b√†n ph√≠m c∆° vs m√†ng",
      "Setup gaming cho budget 20 tri·ªáu",
      "Tai nghe gaming t·ªët nh·∫•t hi·ªán t·∫°i",
      "M√†n h√¨nh 144Hz gi√° r·∫ª",
      "Laptop gaming cho h·ªçc sinh",
      "Combo chu·ªôt + b√†n ph√≠m RGB",
    ];
    return suggestions;
  }

  // Get gaming categories for quick access
  getGamingCategories() {
    return [
      { name: "Chu·ªôt Gaming", icon: "üñ±Ô∏è" },
      { name: "B√†n ph√≠m Gaming", icon: "‚å®Ô∏è" },
      { name: "Tai nghe Gaming", icon: "üéß" },
      { name: "M√†n h√¨nh Gaming", icon: "üñ•Ô∏è" },
      { name: "Laptop Gaming", icon: "üíª" },
      { name: "Setup Gaming", icon: "üéÆ" },
    ];
  }

  // Test connection
  async testConnection() {
    try {
      const testResult = await this.sendMessage("Xin ch√†o");
      return testResult.success;
    } catch (error) {
      console.error("Connection test failed:", error);
      return false;
    }
  }
}

// Export singleton instance
export const gamingChatbot = new GamingChatbot();
export default gamingChatbot;
