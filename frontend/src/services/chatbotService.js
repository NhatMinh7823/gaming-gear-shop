// chatbotService.js - Frontend service for Gaming Gear Shop Chatbot
import api from "./api";

class GamingChatbot {
  constructor() {
    this.chatHistory = [];
    this.sessionId = null;
    this.isTyping = false;
  } // Send message to backend chatbot
  async sendMessage(message, userInfo = null) {
    if (!message.trim()) {
      throw new Error("Message cannot be empty");
    }

    this.isTyping = true;

    try {
      const requestBody = {
        message: message.trim(),
        sessionId: this.sessionId,
      }; // Add userId if user is authenticated
      // Check for both _id and id since backend returns 'id' but some components might use '_id'
      const userId = userInfo?._id || userInfo?.id;
      if (userInfo && userId) {
        requestBody.userId = userId;
        console.log(
          "üîç Frontend chatbotService: Adding userId to request:",
          userId
        );
        console.log("üîç Complete userInfo object:", userInfo);
      } else {
        console.log(
          "üîç Frontend chatbotService: No userInfo or userId:",
          userInfo
        );
      }

      console.log("üîç Sending request body:", requestBody);

      const response = await api.post("/chatbot/chat", requestBody);

      if (response.data.success) {
        const {
          response: botResponse,
          sessionId,
          timestamp,
        } = response.data.data;

        // Update session ID if provided
        if (sessionId) {
          this.sessionId = sessionId;
        }

        // Add messages to local history
        this.addToHistory("user", message, timestamp);
        this.addToHistory("bot", botResponse, timestamp);

        return {
          response: botResponse,
          sessionId: sessionId,
          timestamp: timestamp,
        };
      } else {
        throw new Error("Failed to get response from chatbot");
      }
    } catch (error) {
      console.error("‚ùå Error sending message to chatbot:", error);

      // Return a fallback response
      const fallbackResponse =
        "Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá v·ªõi nh√¢n vi√™n h·ªó tr·ª£.";
      this.addToHistory("user", message);
      this.addToHistory("bot", fallbackResponse);

      return {
        response: fallbackResponse,
        sessionId: this.sessionId,
        timestamp: new Date().toISOString(),
        error: true,
      };
    } finally {
      this.isTyping = false;
    }
  }

  // Add message to local chat history
  addToHistory(role, content, timestamp = null) {
    this.chatHistory.push({
      role,
      content,
      timestamp: timestamp || new Date().toISOString(),
      id: `${role}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    });

    // Keep only last 50 messages to prevent memory issues
    if (this.chatHistory.length > 50) {
      this.chatHistory = this.chatHistory.slice(-50);
    }
  }

  // Get chat history
  getHistory() {
    return [...this.chatHistory]; // Return a copy
  }

  // Clear chat history and start new session
  clearHistory() {
    this.chatHistory = [];
    this.sessionId = null;
  }

  // Get typing status
  getTypingStatus() {
    return this.isTyping;
  }

  // Get current session ID
  getSessionId() {
    return this.sessionId;
  }

  // Quick responses for common questions
  getQuickResponses() {
    return [
      "T√¥i c·∫ßn t∆∞ v·∫•n chu·ªôt gaming",
      "B√†n ph√≠m c∆° n√†o t·ªët?",
      "Tai nghe gaming trong t·∫ßm gi√° 1 tri·ªáu",
      "Setup gaming budget 20 tri·ªáu",
      "M√†n h√¨nh gaming 144Hz",
      "Laptop gaming sinh vi√™n",
    ];
  }

  // Suggested follow-up questions based on context
  getSuggestedQuestions(lastBotResponse) {
    if (!lastBotResponse) return [];

    const suggestions = [];

    if (lastBotResponse.includes("chu·ªôt")) {
      suggestions.push(
        "DPI bao nhi√™u l√† ph√π h·ª£p?",
        "Chu·ªôt c√≥ d√¢y hay kh√¥ng d√¢y?"
      );
    }

    if (lastBotResponse.includes("b√†n ph√≠m")) {
      suggestions.push("Switch n√†o √™m nh·∫•t?", "B√†n ph√≠m c√≥ LED RGB kh√¥ng?");
    }

    if (lastBotResponse.includes("tai nghe")) {
      suggestions.push("C√≥ micro t·ªët kh√¥ng?", "Tai nghe c√≥ ch·ªëng ·ªìn kh√¥ng?");
    }

    if (lastBotResponse.includes("m√†n h√¨nh")) {
      suggestions.push(
        "K√≠ch th∆∞·ªõc m√†n h√¨nh n√†o ph√π h·ª£p?",
        "T·∫ßn s·ªë qu√©t cao c√≥ c·∫ßn thi·∫øt?"
      );
    }

    if (lastBotResponse.includes("gi√°") || lastBotResponse.includes("VND")) {
      suggestions.push(
        "C√≥ khuy·∫øn m√£i g√¨ kh√¥ng?",
        "C√≥ s·∫£n ph·∫©m t∆∞∆°ng t·ª± r·∫ª h∆°n?"
      );
    }

    return suggestions.slice(0, 3); // Return max 3 suggestions
  }

  // Format price for display
  formatPrice(price) {
    if (typeof price !== "number") return price;
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(price);
  }

  // Validate message before sending
  validateMessage(message) {
    if (!message || typeof message !== "string") {
      return { valid: false, error: "Tin nh·∫Øn kh√¥ng h·ª£p l·ªá" };
    }

    const trimmed = message.trim();

    if (trimmed.length === 0) {
      return { valid: false, error: "Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" };
    }

    if (trimmed.length > 1000) {
      return { valid: false, error: "Tin nh·∫Øn qu√° d√†i (t·ªëi ƒëa 1000 k√Ω t·ª±)" };
    }

    return { valid: true, message: trimmed };
  }

  // Get bot status
  getBotStatus() {
    return {
      isOnline: true, // Assume online if service is running
      isTyping: this.isTyping,
      sessionId: this.sessionId,
      historyLength: this.chatHistory.length,
    };
  }
}

// Export singleton instance
const gamingChatbot = new GamingChatbot();
export default gamingChatbot;
