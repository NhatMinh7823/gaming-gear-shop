import { GoogleGenerativeAI } from "@google/generative-ai";

class GamingChatbot {
  constructor() {
    this.genAI = null;
    this.model = null;
    this.chat = null;
    this.chatHistory = [];
    this.systemPrompt = `B·∫°n l√† tr·ª£ l√Ω AI cho c·ª≠a h√†ng Gaming Gear Shop chuy√™n v·ªÅ thi·∫øt b·ªã gaming.
          
Nhi·ªám v·ª• c·ªßa b·∫°n:
- T∆∞ v·∫•n s·∫£n ph·∫©m gaming (chu·ªôt, b√†n ph√≠m, tai nghe, m√†n h√¨nh, laptop gaming)
- Gi√∫p kh√°ch h√†ng ch·ªçn setup gaming ph√π h·ª£p v·ªõi budget
- Tr·∫£ l·ªùi v·ªÅ th√¥ng s·ªë k·ªπ thu·∫≠t v√† so s√°nh s·∫£n ph·∫©m
- T∆∞ v·∫•n v·ªÅ combo gaming v√† khuy·∫øn m√£i
- H·ªó tr·ª£ troubleshooting c∆° b·∫£n cho thi·∫øt b·ªã gaming

Phong c√°ch tr·∫£ l·ªùi:
- Th√¢n thi·ªán, nhi·ªát t√¨nh nh∆∞ m·ªôt gamer chuy√™n nghi·ªáp
- S·ª≠ d·ª•ng thu·∫≠t ng·ªØ gaming ph√π h·ª£p
- ƒê∆∞a ra g·ª£i √Ω c·ª• th·ªÉ v√† th·ª±c t·∫ø
- Lu√¥n h·ªèi th√™m v·ªÅ budget v√† nhu c·∫ßu s·ª≠ d·ª•ng

Ki·∫øn th·ª©c v·ªÅ s·∫£n ph·∫©m:
- Chu·ªôt gaming: DPI, polling rate, sensor, switch
- B√†n ph√≠m: mechanical, membrane, switch types (Cherry MX, Gateron)
- Tai nghe: driver size, frequency response, surround sound
- M√†n h√¨nh: refresh rate, response time, panel types
- Laptop gaming: GPU, CPU, RAM, storage

L∆∞u √Ω: N·∫øu kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ th√¥ng tin c·ª• th·ªÉ, h√£y th·ª´a nh·∫≠n v√† ƒë·ªÅ xu·∫•t li√™n h·ªá nh√¢n vi√™n t∆∞ v·∫•n.`;

    this.initializeModel();
  }

  initializeModel() {
    try {
      const apiKey = process.env.REACT_APP_GEMINI_API_KEY;

      if (!apiKey) {
        throw new Error("API_KEY not found in environment variables");
      }

      this.genAI = new GoogleGenerativeAI(apiKey);
      this.model = this.genAI.getGenerativeModel({
        model: "gemini-1.5-flash",
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 500,
        },
      });

      // Initialize chat with system prompt
      this.chat = this.model.startChat({
        history: [
          {
            role: "user",
            parts: [{ text: this.systemPrompt }],
          },
          {
            role: "model",
            parts: [
              {
                text: "Xin ch√†o! T√¥i ƒë√£ hi·ªÉu vai tr√≤ c·ªßa m√¨nh l√† tr·ª£ l√Ω AI chuy√™n t∆∞ v·∫•n gaming gear. T√¥i s·∫µn s√†ng gi√∫p b·∫°n!",
              },
            ],
          },
        ],
      });

      console.log(
        "‚úÖ Gaming Chatbot initialized successfully with Google Generative AI"
      );
    } catch (error) {
      console.error("‚ùå Failed to initialize chatbot:", error);
      throw new Error("Chatbot initialization failed");
    }
  }

  async sendMessage(message) {
    try {
      if (!this.chat) {
        throw new Error("Chatbot not initialized");
      }

      // Send message to Gemini
      const result = await this.chat.sendMessage(message);
      const response = await result.response;
      const text = response.text();

      // Store in chat history for context
      this.chatHistory.push({
        user: message,
        bot: text,
        timestamp: new Date().toISOString(),
      });

      return {
        success: true,
        message: text,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      console.error("‚ùå Error sending message:", error);

      // Handle specific error types
      let errorMessage = "Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.";

      if (
        error.message.includes("API_KEY") ||
        error.message.includes("API key")
      ) {
        errorMessage =
          "L·ªói c·∫•u h√¨nh API. Vui l√≤ng ki·ªÉm tra API key trong file .env";
      } else if (
        error.message.includes("QUOTA_EXCEEDED") ||
        error.message.includes("quota")
      ) {
        errorMessage =
          "ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.";
      } else if (
        error.message.includes("RATE_LIMIT") ||
        error.message.includes("rate limit")
      ) {
        errorMessage = "B·∫°n g·ª≠i tin nh·∫Øn h∆°i nhanh r·ªìi ƒë·∫•y! Ch·ªù ch√∫t nh√© üòä";
      } else if (
        error.message.includes("404") ||
        error.message.includes("not found")
      ) {
        errorMessage = "Model AI kh√¥ng kh·∫£ d·ª•ng. ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...";
      }

      return {
        success: false,
        message: errorMessage,
        error: error.message,
        timestamp: new Date().toISOString(),
      };
    }
  }

  clearMemory() {
    // Reset chat session
    this.chat = this.model.startChat({
      history: [
        {
          role: "user",
          parts: [{ text: this.systemPrompt }],
        },
        {
          role: "model",
          parts: [
            {
              text: "Xin ch√†o! T√¥i ƒë√£ hi·ªÉu vai tr√≤ c·ªßa m√¨nh l√† tr·ª£ l√Ω AI chuy√™n t∆∞ v·∫•n gaming gear. T√¥i s·∫µn s√†ng gi√∫p b·∫°n!",
            },
          ],
        },
      ],
    });

    this.chatHistory = [];
    console.log("üßπ Chat memory cleared");
  }

  async getQuickSuggestions() {
    const suggestions = [
      "T∆∞ v·∫•n chu·ªôt gaming d∆∞·ªõi 1 tri·ªáu",
      "So s√°nh b√†n ph√≠m c∆° vs m√†ng",
      "Setup gaming cho budget 20 tri·ªáu",
      "Tai nghe gaming t·ªët nh·∫•t hi·ªán t·∫°i",
      "M√†n h√¨nh 144Hz gi√° r·∫ª",
      "Laptop gaming cho h·ªçc sinh",
      "Combo chu·ªôt + b√†n ph√≠m RGB",
    ];
    return suggestions;
  }

  // Get gaming categories for quick access
  getGamingCategories() {
    return [
      { name: "Chu·ªôt Gaming", icon: "üñ±Ô∏è" },
      { name: "B√†n ph√≠m Gaming", icon: "‚å®Ô∏è" },
      { name: "Tai nghe Gaming", icon: "üéß" },
      { name: "M√†n h√¨nh Gaming", icon: "üñ•Ô∏è" },
      { name: "Laptop Gaming", icon: "üíª" },
      { name: "Setup Gaming", icon: "üéÆ" },
    ];
  }

  // Get chat statistics
  getChatStats() {
    return {
      totalMessages: this.chatHistory.length,
      isInitialized: !!this.chat,
      modelName: "gemini-1.5-flash",
    };
  }
}

// Export singleton instance
export const gamingChatbot = new GamingChatbot();
export default gamingChatbot;
