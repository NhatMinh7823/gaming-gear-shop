const { StructuredTool } = require("langchain/tools");
const { z } = require("zod");
const WishlistIntentClassifier = require("./WishlistIntentClassifier");

/**
 * IntentDetector - Tool ƒë·ªÉ ph√°t hi·ªán intent v·ªÅ wishlist m·ªôt c√°ch th√¥ng minh
 */
class IntentDetector extends StructuredTool {
  constructor() {
    super();
    this.name = "intent_detector";
    this.description = "Ph√°t hi·ªán intent c·ªßa ng∆∞·ªùi d√πng v·ªÅ wishlist v√† t∆∞ v·∫•n c√° nh√¢n b·∫±ng AI classifier n√¢ng cao";
    this.classifier = new WishlistIntentClassifier();
    this.schema = z.object({
      message: z.string().describe("Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng c·∫ßn ph√¢n t√≠ch intent"),
    });
  }

  /**
   * Ph√°t hi·ªán c√°c t·ª´ kh√≥a wishlist tr·ª±c ti·∫øp
   */
  detectDirectWishlistKeywords(message) {
    const directKeywords = [
      'wishlist', 'danh s√°ch y√™u th√≠ch', 's·∫£n ph·∫©m y√™u th√≠ch',
      'quan t√¢m', 'ƒë√£ l∆∞u', 'bookmark', 'ƒë√°nh d·∫•u',
      'favorite', 'liked', 'saved'
    ];
    
    return directKeywords.some(keyword => 
      message.toLowerCase().includes(keyword.toLowerCase())
    );
  }

  /**
   * Ph√°t hi·ªán intent t∆∞ v·∫•n c√° nh√¢n
   */
  detectPersonalAdviceIntent(message) {
    const personalPronouns = ['t√¥i', 'm√¨nh', 'c·ªßa t√¥i', 'cho t√¥i', 'v·ªõi t√¥i'];
    const adviceKeywords = [
      't∆∞ v·∫•n', 'g·ª£i √Ω', 'ƒë·ªÅ xu·∫•t', 'recommend', 'suggest',
      'n√™n mua', 'n√™n ch·ªçn', 'ph√π h·ª£p', 'suitable', 'match'
    ];
    
    const hasPersonalContext = personalPronouns.some(pronoun =>
      message.toLowerCase().includes(pronoun.toLowerCase())
    );
    
    const hasAdviceRequest = adviceKeywords.some(keyword =>
      message.toLowerCase().includes(keyword.toLowerCase())
    );
    
    return hasPersonalContext && hasAdviceRequest;
  }

  /**
   * Ph√°t hi·ªán intent th√¥ng tin c√° nh√¢n
   */
  detectPersonalInfoIntent(message) {
    const personalInfoPatterns = [
      /bi·∫øt.*g√¨.*v·ªÅ.*t√¥i/i,
      /th√¥ng tin.*v·ªÅ.*t√¥i/i,
      /profile.*c·ªßa.*t√¥i/i,
      /s·ªü th√≠ch.*c·ªßa.*t√¥i/i,
      /preference.*c·ªßa.*t√¥i/i,
      /setup.*c·ªßa.*t√¥i/i,
      /gear.*hi·ªán t·∫°i/i,
      /(t√¥i|m√¨nh).*c√≥.*g√¨/i,
      /(t√¥i|m√¨nh).*ƒëang.*d√πng/i
    ];
    
    return personalInfoPatterns.some(pattern => pattern.test(message));
  }

  /**
   * Ph√°t hi·ªán intent so s√°nh v√† upgrade
   */
  detectComparisonIntent(message) {
    const comparisonKeywords = [
      'so v·ªõi', 'compare', 'so s√°nh', 'upgrade', 'n√¢ng c·∫•p',
      'thay th·∫ø', 'replace', 'better than', 't·ªët h∆°n',
      'kh√°c g√¨', 'difference', 'vs', 'versus'
    ];
    
    const hasComparison = comparisonKeywords.some(keyword =>
      message.toLowerCase().includes(keyword.toLowerCase())
    );
    
    const hasPersonalReference = ['t√¥i c√≥', 'm√¨nh c√≥', 'ƒëang d√πng', 'hi·ªán t·∫°i'].some(ref =>
      message.toLowerCase().includes(ref.toLowerCase())
    );
    
    return hasComparison && hasPersonalReference;
  }

  /**
   * Ph√°t hi·ªán intent setup gaming
   */
  detectSetupIntent(message) {
    const setupKeywords = [
      'setup', 'gaming setup', 'b·ªô setup', 'thi·∫øt l·∫≠p',
      'thi·∫øu g√¨', 'b·ªï sung', 'complete', 'ho√†n thi·ªán',
      'build', 'rig', 'workstation'
    ];
    
    const gamingKeywords = [
      'gaming', 'game', 'ch∆°i game', 'streamer', 'streaming'
    ];
    
    const hasSetupKeyword = setupKeywords.some(keyword =>
      message.toLowerCase().includes(keyword.toLowerCase())
    );
    
    const hasGamingContext = gamingKeywords.some(keyword =>
      message.toLowerCase().includes(keyword.toLowerCase())
    );
    
    return hasSetupKeyword || hasGamingContext;
  }

  /**
   * Ph√°t hi·ªán intent mua s·∫Øm d·ª±a tr√™n l·ªãch s·ª≠
   */
  detectHistoryBasedIntent(message) {
    const historyKeywords = [
      'd·ª±a tr√™n', 'based on', 'theo', 'similar',
      't∆∞∆°ng t·ª±', 'gi·ªëng', 'pattern', 'l·ªãch s·ª≠',
      'th∆∞·ªùng mua', 'hay d√πng', 'style', 'phong c√°ch'
    ];
    
    return historyKeywords.some(keyword =>
      message.toLowerCase().includes(keyword.toLowerCase())
    );
  }

  /**
   * T√≠nh ƒëi·ªÉm confidence cho wishlist intent
   */
  calculateWishlistConfidence(message) {
    let score = 0;
    let reasons = [];

    if (this.detectDirectWishlistKeywords(message)) {
      score += 40;
      reasons.push('Direct wishlist keywords detected');
    }

    if (this.detectPersonalAdviceIntent(message)) {
      score += 30;
      reasons.push('Personal advice intent detected');
    }

    if (this.detectPersonalInfoIntent(message)) {
      score += 25;
      reasons.push('Personal info intent detected');
    }

    if (this.detectComparisonIntent(message)) {
      score += 20;
      reasons.push('Comparison intent detected');
    }

    if (this.detectSetupIntent(message)) {
      score += 15;
      reasons.push('Setup intent detected');
    }

    if (this.detectHistoryBasedIntent(message)) {
      score += 15;
      reasons.push('History-based intent detected');
    }

    // Bonus ƒëi·ªÉm n·∫øu c√≥ nhi·ªÅu personal pronouns
    const personalCount = (message.match(/(t√¥i|m√¨nh|c·ªßa t√¥i|cho t√¥i)/gi) || []).length;
    if (personalCount >= 2) {
      score += 10;
      reasons.push('Multiple personal pronouns');
    }

    return { score: Math.min(score, 100), reasons };
  }

  /**
   * G·ª£i √Ω action ph√π h·ª£p cho wishlist tool
   */
  suggestWishlistAction(message) {
    if (/xem|show|hi·ªÉn th·ªã|c√≥ g√¨|list/i.test(message)) {
      return 'get_wishlist';
    }
    
    if (/g·ª£i √Ω|recommend|suggest|t∆∞∆°ng t·ª±|similar/i.test(message)) {
      return 'get_recommendations';
    }
    
    if (/ph√¢n t√≠ch|analyze|pattern|xu h∆∞·ªõng|s·ªü th√≠ch/i.test(message)) {
      return 'analyze_preferences';
    }
    
    if (/thi·∫øu|missing|b·ªï sung|complete|setup|upgrade/i.test(message)) {
      return 'suggest_complementary';
    }
    
    return 'get_wishlist'; // Default action
  }

  async _call({ message }) {
    try {
      const confidence = this.calculateWishlistConfidence(message);
      const shouldUseWishlist = confidence.score >= 25; // Threshold 25%
      const suggestedAction = this.suggestWishlistAction(message);
      
      const result = {
        shouldUseWishlist,
        confidence: confidence.score,
        reasons: confidence.reasons,
        suggestedAction,
        message: message,
        analysis: {
          directWishlist: this.detectDirectWishlistKeywords(message),
          personalAdvice: this.detectPersonalAdviceIntent(message),
          personalInfo: this.detectPersonalInfoIntent(message),
          comparison: this.detectComparisonIntent(message),
          setup: this.detectSetupIntent(message),
          historyBased: this.detectHistoryBasedIntent(message)
        }
      };

      if (shouldUseWishlist) {
        return `üéØ INTENT DETECTED: N√™n s·ª≠ d·ª•ng wishlist_tool
Confidence: ${confidence.score}%
Action: ${suggestedAction}
Reasons: ${confidence.reasons.join(', ')}

Recommended flow:
1. Call wishlist_tool with action="${suggestedAction}"
2. Use results for personalized recommendation
3. Provide detailed advice based on user's preferences`;
      } else {
        return `‚ùå INTENT NOT DETECTED: Kh√¥ng n√™n s·ª≠ d·ª•ng wishlist_tool
Confidence: ${confidence.score}% (d∆∞·ªõi ng∆∞·ª°ng 25%)
Suggested: X·ª≠ l√Ω nh∆∞ c√¢u h·ªèi th√¥ng th∆∞·ªùng v·ªÅ s·∫£n ph·∫©m`;
      }
      
    } catch (error) {
      return `Error in intent detection: ${error.message}`;
    }
  }
}

module.exports = IntentDetector;