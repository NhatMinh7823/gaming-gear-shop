const { StructuredTool } = require("@langchain/core/tools");
const { z } = require("zod");
const { ChatGoogleGenerativeAI } = require("@langchain/google-genai");
const { llmConfig } = require("../../config/llmConfig");
const {
  formatProductFromMetadata,
  formatProductFromDB,
} = require("../../config/utils");

class AIProductSearchTool extends StructuredTool {
  constructor(options = {}) {
    super();
    const { vectorStoreManager } = options;
    if (!vectorStoreManager) {
      throw new Error(
        "AIProductSearchTool requires a valid vectorStoreManager in options."
      );
    }
    this.llm = new ChatGoogleGenerativeAI(llmConfig);
    this.vectorStoreManager = vectorStoreManager;
  }

  schema = z.object({
    query: z.string().describe("T·ª´ kh√≥a t√¨m ki·∫øm"),
    limit: z.number().optional().default(5).describe("S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ªëi ƒëa"),
  });

  name = "ai_product_search";
  description = `T√¨m ki·∫øm s·∫£n ph·∫©m chung d·ª±a tr√™n c√°c ti√™u ch√≠ kh√°ch quan nh∆∞ t√™n, danh m·ª•c, ho·∫∑c th√¥ng s·ªë k·ªπ thu·∫≠t.
    D√πng khi ng∆∞·ªùi d√πng mu·ªën xem danh s√°ch s·∫£n ph·∫©m m√† kh√¥ng c·∫ßn t∆∞ v·∫•n c√° nh√¢n.
    **KH√îNG D√ôNG** khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ s·∫£n ph·∫©m 'ph√π h·ª£p', 'd√†nh cho t√¥i', ho·∫∑c c·∫ßn t∆∞ v·∫•n d·ª±a tr√™n s·ªü th√≠ch.
    Trong tr∆∞·ªùng h·ª£p ƒë√≥, h√£y d√πng 'ai_smart_wishlist'.
    Khi ng∆∞·ªùi d√πng ƒë·ªÉ c·∫∑p ƒë·∫øn t√¨m ki·∫øm d·ª±a tr√™n gi√° c·∫£ (ƒë·∫∑t bi·ªát l√† gi√° ƒë·∫Øt nh·∫•t v√† r·∫ª nh·∫•t), h√£y ƒëi·ªÅu ch·ªânh QUERY v·ªõi 2 t·ª´ kh√≥a 'most expensive - cheapest' t∆∞∆°ng ·ª©ng v√† ch·ªâ c·∫ßn ch·ªçn limit l√† 2.
    Khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ c√°c th√¥ng s·ªë k·ªπ thu·∫≠t hay c√°c t√≠nh nƒÉng c·ª• th·ªÉ, h√£y d·ªãch y√™u c·∫ßu ƒë√≥ c·ªßa ng∆∞·ªùi d√πng sang t·ª´ kh√≥a ti·∫øng Anh ƒë·ªÉ t√¨m ki·∫øm.
    Tai nghe l√† Headset.
    Khi h·ªèi v·ªÅ kho·∫£ng gi√°, h√£y ƒë·∫£m b·∫£o query ƒë√≥ match(/(t·ª´|kho·∫£ng|gi√°|t·∫ßm)\s*(\d+)\s*(ƒë·∫øn|-|t·ªõi)\s*(\d+)/i).
    categories = [
          "B√†n ph√≠m c∆°",
          "Chu·ªôt",
          "Tai nghe",
          "M√†n h√¨nh",
          "Gaming Laptops",
          "Gaming PCs",
        ]
    khi ƒë√£ t√¨m th·∫•y th√¨ h√£y d·ª´ng l·∫°i v√† t∆∞ v·∫•n k·∫øt qu·∫£ ƒë√£ t√¨m ƒë∆∞·ª£c.
    `;

  async _call(input) {
    try {
      const query = input.query || "";
      const limit = input.limit || 5;

      console.log(
        `ü§ñ AIProductSearchTool called with query: "${query}", limit: ${limit}`
      );

      // Check for price range query
      const priceRangeMatch = query.match(
        /(t·ª´|kho·∫£ng|gi√°|t·∫ßm)\s*(\d+)\s*(ƒë·∫øn|-|t·ªõi)\s*(\d+)/i
      );
      if (priceRangeMatch) {
        console.log("üîç Detected price range query:", priceRangeMatch);
        let minPrice = parseInt(priceRangeMatch[2]);
        let maxPrice = parseInt(priceRangeMatch[4]);
        if (/tri·ªáu/i.test(query)) {
          minPrice *= 1_000_000;
          maxPrice *= 1_000_000;
        }

        // Use direct DB search for price range queries (∆∞u ti√™n discountPrice n·∫øu c√≥, fallback price)
        const Product = require("../../../models/productModel");
        const filter = {
          $and: [
            {
              $or: [
                { discountPrice: { $gte: minPrice, $lte: maxPrice } },
                {
                  $and: [
                    {
                      $or: [
                        { discountPrice: { $exists: false } },
                        { discountPrice: null },
                      ],
                    },
                    { price: { $gte: minPrice, $lte: maxPrice } },
                  ],
                },
              ],
            },
          ],
        };
        const categories = [
          "B√†n ph√≠m c∆°",
          "Chu·ªôt",
          "Tai nghe",
          "M√†n h√¨nh",
          "Gaming Laptops",
          "Gaming PCs",
        ];
        let category = null;
        for (const cat of categories) {
          if (query.toLowerCase().includes(cat.toLowerCase())) {
            category = cat;
            break;
          }
        }
        const Category = require("../../../models/categoryModel");
        const foundCategory = await Category.findOne({ name: category });
        
        if (category && foundCategory) {
          console.log("üîç Found category:", foundCategory.name);
          filter.$and.push({ category: foundCategory._id });
        }

        const products = await Product.find(filter).populate('category').limit(limit);

        if (!products || products.length === 0) {
          return "[TASK_COMPLETED: product_search] ‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong kho·∫£ng gi√° n√†y.";
        }

        // Format results using formatProductFromDB
        const formattedProducts = products.map((product) =>
          formatProductFromDB(product)
        );
        return `[TASK_COMPLETED: product_search] üîç **K·∫øt qu·∫£ t√¨m ki·∫øm cho "${query}"**\n\n## üì¶ ${
          products.length
        } S·∫£n ph·∫©m ƒë∆∞·ª£c t√¨m th·∫•y:\n\n${formattedProducts.join("\n\n")}`;
      }

      // Semantic search using vectorStoreManager for non-price queries
      if (!this.vectorStoreManager) {
        throw new Error("VectorStoreManager is not provided.");
      }
      const vectorResults = await this.vectorStoreManager.similaritySearch(
        query,
        limit
      );

      if (!vectorResults || vectorResults.length === 0) {
        return "[TASK_COMPLETED: product_search] ‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p theo semantic search.";
      }

      // Use only metadata from vectorStore (no DB query)
      const productsForAI = vectorResults.map((res) => ({
        id: res.metadata?.id || "",
        name: res.metadata?.name || "",
        brand: res.metadata?.brand || "N/A",
        category: res.metadata?.category || "N/A",
        price: res.metadata?.price,
        discountPrice: res.metadata?.discountPrice || null,
        effectivePrice: res.metadata?.discountPrice || res.metadata?.price,
        description: res.metadata?.description || "",
        features: res.metadata?.features || [],
        specifications: res.metadata?.specifications || {},
        averageRating: res.metadata?.averageRating || 0,
        numReviews: res.metadata?.numReviews || 0,
        stock: res.metadata?.stock,
        inStock: res.metadata?.inStock,
      }));

      // Use LLM to select suitable products and generate response
      const prompt = `D·ª±a tr√™n truy v·∫•n: "${query}", h√£y ch·ªçn c√°c s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t t·ª´ danh s√°ch sau v√† ƒë·ªãnh d·∫°ng ch√∫ng m·ªôt c√°ch ƒë·∫πp ƒë·∫Ω ƒë·ªÉ tr·∫£ l·ªùi ng∆∞·ªùi d√πng.\nDanh s√°ch s·∫£n ph·∫©m:\n${JSON.stringify(productsForAI, null, 2)}`;
      const aiResponse = await this.llm.invoke(prompt);
      const selectedProductsResponse = aiResponse.content;
      return `[TASK_COMPLETED: product_search] ${selectedProductsResponse}`;
    } catch (error) {
      console.error("‚ùå Error in AIProductSearchTool:", error);
      return `‚ùå L·ªói AI t√¨m ki·∫øm s·∫£n ph·∫©m: ${error.message}`;
    }
  }
}

module.exports = AIProductSearchTool;
