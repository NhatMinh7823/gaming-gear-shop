const { StructuredTool } = require("@langchain/core/tools");
const { z } = require("zod");
const { ChatGoogleGenerativeAI } = require("@langchain/google-genai");
const mongoose = require("mongoose");
const Cart = require("../../../models/cartModel");
const Product = require("../../../models/productModel");
const VectorStoreManager = require("../../chatbot/VectorStoreManager");
const { llmConfig } = require("../../config/llmConfig");

/**
 * AISmartCartTool - A simplified, AI-driven tool for intelligent cart management.
 * This version streamlines the logic by using a single LLM call for all cart operations,
 * removing the complex two-step AI verification for adding products.
 */
class AISmartCartTool extends StructuredTool {
  constructor(userContext = null) {
    super();
    this.name = "ai_smart_cart";
    this.description = `Qu·∫£n l√Ω gi·ªè h√†ng th√¥ng minh. S·ª≠ d·ª•ng khi ng∆∞·ªùi d√πng mu·ªën th√™m, x√≥a, xem, ho·∫∑c c·∫≠p nh·∫≠t s·∫£n ph·∫©m trong gi·ªè h√†ng. T·ª´ kh√≥a: mua, th√™m, gi·ªè h√†ng, cart, x√≥a, xem. Ch·ªâ ho·∫°t ƒë·ªông khi ƒë√£ ƒëƒÉng nh·∫≠p. Khi y√™u c·∫ßu th√™m h√£y th·ª±c hi·ªán search_and_add.`;
    this.userContext = userContext;
    this.llm = new ChatGoogleGenerativeAI(llmConfig);
    this.debugMode = process.env.CHATBOT_DEBUG === "true";
    
    this.schema = z.object({
      query: z.string().describe("User's natural language query about cart operations."),
    });
  }

  log(message, ...args) {
    if (this.debugMode) {
      console.log(`[AISmartCartTool] ${message}`, ...args);
    }
  }

  async _call({ query }) {
    try {
      const userId = this.userContext ? this.userContext.getUserId() : null;
      if (!userId) {
        return "üîí ƒê·ªÉ s·ª≠ d·ª•ng gi·ªè h√†ng, b·∫°n c·∫ßn ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n.";
      }

      this.log(`Processing query: "${query}" for userId: ${userId}`);
      const currentCart = await this.getCurrentCart(userId);
      const aiPrompt = this.createCartAIPrompt(query, currentCart);

      this.log("Sending query to Gemini AI...");
      const aiResponse = await this.llm.invoke(aiPrompt);
      
      let aiResult;
      try {
        const jsonMatch = aiResponse.content.match(/\{[\s\S]*\}/);
        if (!jsonMatch) throw new Error("No JSON found in AI response");
        aiResult = JSON.parse(jsonMatch[0]);
      } catch (parseError) {
        this.log("AI JSON parsing error:", parseError, "Response:", aiResponse.content);
        return this.fallbackResponse(query);
      }

      if (!aiResult || !aiResult.action) {
        this.log("Invalid AI result structure:", aiResult);
        return this.fallbackResponse(query);
      }

      return await this.executeAIAction(aiResult, userId);

    } catch (error) {
      this.log("Error in AISmartCartTool:", error);
      return `‚ùå L·ªói x·ª≠ l√Ω gi·ªè h√†ng: ${error.message}. Vui l√≤ng th·ª≠ l·∫°i.`;
    }
  }

  async getCurrentCart(userId) {
    try {
      const cart = await Cart.findOne({ user: userId }).populate('items.product');
      return {
        itemCount: cart ? cart.items.length : 0,
        totalPrice: cart ? cart.totalPrice : 0,
        items: cart ? cart.items.map(item => ({
          productId: item.product?._id.toString(),
          name: item.name,
          quantity: item.quantity,
        })) : []
      };
    } catch (error) {
      this.log("Error getting current cart:", error);
      return { itemCount: 0, totalPrice: 0, items: [] };
    }
  }

  createCartAIPrompt(query, currentCart) {
    return `B·∫°n l√† AI qu·∫£n l√Ω gi·ªè h√†ng. Ph√¢n t√≠ch y√™u c·∫ßu c·ªßa kh√°ch h√†ng v√† th√¥ng tin gi·ªè h√†ng ƒë·ªÉ quy·∫øt ƒë·ªãnh h√†nh ƒë·ªông.

**Gi·ªè h√†ng hi·ªán t·∫°i:**
${JSON.stringify(currentCart, null, 2)}

**Y√™u c·∫ßu kh√°ch h√†ng:** "${query}"

**H√†nh ƒë·ªông c√≥ th·ªÉ th·ª±c hi·ªán:**
- **search_and_add**: T√¨m v√† th√™m s·∫£n ph·∫©m.
- **view_cart**: Xem gi·ªè h√†ng.
- **remove_product**: X√≥a s·∫£n ph·∫©m.
- **clear_cart**: X√≥a to√†n b·ªô gi·ªè h√†ng.
- **update_quantity**: C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng.
- **uncertain**: Khi kh√¥ng hi·ªÉu r√µ y√™u c·∫ßu.

**Tr√≠ch xu·∫•t th√¥ng tin:**
- **productName**: T√™n s·∫£n ph·∫©m (cho c√°c h√†nh ƒë·ªông add, remove, update).
- **quantity**: S·ªë l∆∞·ª£ng (m·∫∑c ƒë·ªãnh l√† 1 n·∫øu kh√¥ng n√≥i r√µ).
- **productId**: ID s·∫£n ph·∫©m (n·∫øu c√≥ th·ªÉ x√°c ƒë·ªãnh t·ª´ gi·ªè h√†ng).

**QUAN TR·ªåNG:**
- Lu√¥n tr·∫£ v·ªÅ m·ªôt JSON object duy nh·∫•t.
- V·ªõi "v√†i c√°i", hi·ªÉu l√† 3. "m·ªôt c·∫∑p" ho·∫∑c "m·ªôt ƒë√¥i" l√† 2.

**V√≠ d·ª• y√™u c·∫ßu -> JSON:**
- "mua 2 chu·ªôt logitech" -> { "action": "search_and_add", "productName": "chu·ªôt logitech", "quantity": 2 }
- "xem gi·ªè h√†ng" -> { "action": "view_cart" }
- "x√≥a con chu·ªôt ra kh·ªèi gi·ªè" -> { "action": "remove_product", "productName": "chu·ªôt" }
- "t√¥i kh√¥ng ch·∫Øc" -> { "action": "uncertain", "responseMessage": "T√¥i ch∆∞a hi·ªÉu r√µ, b·∫°n c√≥ th·ªÉ n√≥i l·∫°i ƒë∆∞·ª£c kh√¥ng?" }

Ph√¢n t√≠ch v√† tr·∫£ v·ªÅ JSON:`;
  }

  async executeAIAction(aiResult, userId) {
    const { action, productName, quantity, productId, responseMessage } = aiResult;
    this.log(`Executing AI action: ${action}`, { productName, quantity, productId });

    try {
      switch (action) {
        case "search_and_add":
          return await this.handleSearchAndAdd(userId, { productName, quantity });
        case "view_cart":
          return await this.handleViewCart(userId);
        case "remove_product":
          return await this.handleRemoveProduct(userId, { productName, productId });
        case "clear_cart":
          return await this.handleClearCart(userId);
        case "update_quantity":
          return await this.handleUpdateQuantity(userId, { productId, productName, quantity });
        case "uncertain":
          return responseMessage || this.generateUncertaintyResponse(aiResult);
        default:
          this.log("Unknown AI action:", action);
          return this.generateUncertaintyResponse(aiResult);
      }
    } catch (error) {
      this.log("Error executing AI action:", error);
      return `‚ùå L·ªói th·ª±c hi·ªán h√†nh ƒë·ªông: ${error.message}`;
    }
  }

  async handleSearchAndAdd(userId, { productName, quantity = 1 }) {
    if (!productName) {
      return "‚ùå AI kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c s·∫£n ph·∫©m b·∫°n mu·ªën t√¨m. Vui l√≤ng th·ª≠ l·∫°i.";
    }

    const vectorStoreManager = VectorStoreManager.getInstance();
    // Search for the top 3 most relevant products
    const searchResults = await vectorStoreManager.similaritySearch(productName, 3);

    if (!searchResults || searchResults.length === 0) {
      return `‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi "${productName}".`;
    }

    // Default to the most relevant product
    const topProductMetadata = searchResults[0].metadata;
    const product = await Product.findById(topProductMetadata.id);
    
    if (!product) {
      return `‚ùå S·∫£n ph·∫©m "${topProductMetadata.name}" kh√¥ng c√≤n t·ªìn t·∫°i.`;
    }

    // If there are multiple relevant results, give user options but proceed with the top one.
    if (searchResults.length > 1) {
      const optionsMessage = this.generateProductSelectionOptions(searchResults, productName);
      const addToCartResult = await this.addToCart(userId, product, quantity);
      return `${addToCartResult}\n\n${optionsMessage}`;
    }

    return await this.addToCart(userId, product, quantity);
  }

  async handleViewCart(userId) {
    const cart = await Cart.findOne({ user: userId }).populate('items.product');

    if (!cart || cart.items.length === 0) {
      return `[ACTION_SUCCESS] üõí Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng. H√£y t√¨m ki·∫øm v√† th√™m s·∫£n ph·∫©m!`;
    }

    const cartItems = cart.items.map((item, index) => {
      const stockStatus = item.product 
        ? (item.product.stock >= item.quantity ? "‚úÖ C√≤n h√†ng" : `‚ö†Ô∏è Ch·ªâ c√≤n ${item.product.stock}`) 
        : "‚ùå S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i";
      
      return `${index + 1}. **${item.name}**
   - S·ªë l∆∞·ª£ng: ${item.quantity}
   - Gi√°: ${item.price.toLocaleString("vi-VN")}ƒë
   - Tr·∫°ng th√°i: ${stockStatus}`;
    }).join("\n\n");

    return `[ACTION_SUCCESS] üõí **Gi·ªè h√†ng c·ªßa b·∫°n:**\n\n${cartItems}\n\nüí∞ **T·ªîNG C·ªòNG: ${cart.totalPrice.toLocaleString("vi-VN")}ƒë**`;
  }

  async handleRemoveProduct(userId, { productName, productId }) {
    const cart = await Cart.findOne({ user: userId });
    if (!cart || cart.items.length === 0) {
      return "‚ùå Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.";
    }

    let itemIndex = -1;
    if (productId) {
      itemIndex = cart.items.findIndex(item => item.product.toString() === productId);
    } else if (productName) {
      const lowerCaseProductName = productName.toLowerCase();
      // ∆Øu ti√™n so kh·ªõp ch√≠nh x√°c t√™n s·∫£n ph·∫©m, n·∫øu kh√¥ng th√¨ m·ªõi d√πng includes
      itemIndex = cart.items.findIndex(item =>
        item.name.toLowerCase() === lowerCaseProductName
      );
      if (itemIndex === -1) {
        itemIndex = cart.items.findIndex(item =>
          item.name.toLowerCase().includes(lowerCaseProductName)
        );
      }
    }

    if (itemIndex === -1) {
      return `‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m kh·ªõp v·ªõi "${productName || productId}" trong gi·ªè h√†ng.`;
    }

    const removedItem = cart.items[itemIndex];
    cart.items.splice(itemIndex, 1);
    await cart.save();

    return `[ACTION_SUCCESS] ‚úÖ ƒê√£ x√≥a **${removedItem.name}** kh·ªèi gi·ªè h√†ng.`;
  }

  async handleClearCart(userId) {
    const cart = await Cart.findOne({ user: userId });
    if (!cart || cart.items.length === 0) {
      return "[ACTION_SUCCESS] ‚úÖ Gi·ªè h√†ng c·ªßa b·∫°n ƒë√£ tr·ªëng r·ªìi.";
    }
    
    await Cart.findOneAndDelete({ user: userId });
    return `[ACTION_SUCCESS] ‚úÖ ƒê√£ x√≥a to√†n b·ªô s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng.`;
  }

  async handleUpdateQuantity(userId, { productId, productName, quantity }) {
    if (!quantity || quantity <= 0) {
      return "‚ùå Vui l√≤ng cung c·∫•p s·ªë l∆∞·ª£ng h·ª£p l·ªá.";
    }

    const cart = await Cart.findOne({ user: userId });
    if (!cart) {
      return "‚ùå Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.";
    }

    let itemIndex = -1;
    if (productId) {
        itemIndex = cart.items.findIndex(item => item.product.toString() === productId);
    } else if (productName) {
        const lowerCaseProductName = productName.toLowerCase();
        itemIndex = cart.items.findIndex(item => item.name.toLowerCase().includes(lowerCaseProductName));
    }

    if (itemIndex === -1) {
      return `‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m kh·ªõp v·ªõi "${productName || productId}" trong gi·ªè h√†ng.`;
    }

    const itemToUpdate = cart.items[itemIndex];
    const product = await Product.findById(itemToUpdate.product);
    if (quantity > product.stock) {
      return `‚ùå Kh√¥ng ƒë·ªß h√†ng! S·∫£n ph·∫©m **${product.name}** ch·ªâ c√≤n ${product.stock} trong kho.`;
    }

    itemToUpdate.quantity = quantity;
    await cart.save();

    return `[ACTION_SUCCESS] ‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng cho **${itemToUpdate.name}** th√†nh **${quantity}**.`;
  }

  async addToCart(userId, product, quantity) {
    if (product.stock < quantity) {
      return `‚ùå Kh√¥ng ƒë·ªß h√†ng! S·∫£n ph·∫©m "${product.name}" ch·ªâ c√≤n ${product.stock} trong kho.`;
    }

    let cart = await Cart.findOne({ user: userId });
    const effectivePrice = product.discountPrice || product.price;

    if (!cart) {
      cart = new Cart({ user: userId, items: [] });
    }

    const existingItemIndex = cart.items.findIndex(
      item => item.product.toString() === product._id.toString()
    );

    if (existingItemIndex > -1) {
      const newQuantity = cart.items[existingItemIndex].quantity + quantity;
      if (newQuantity > product.stock) {
        return `‚ùå Kh√¥ng th·ªÉ th√™m! B·∫°n mu·ªën th√™m ${quantity} s·∫£n ph·∫©m, nh∆∞ng trong kho ch·ªâ c√≤n ${product.stock} v√† b·∫°n ƒë√£ c√≥ ${cart.items[existingItemIndex].quantity} trong gi·ªè.`;
      }
      cart.items[existingItemIndex].quantity = newQuantity;
    } else {
      cart.items.push({
        product: product._id,
        name: product.name,
        image: product.images?.[0]?.url || "",
        price: effectivePrice,
        quantity: quantity,
      });
    }
    
    await cart.save();
    
    return `[ACTION_SUCCESS] ‚úÖ ƒê√£ th√™m **${quantity} x ${product.name}** v√†o gi·ªè h√†ng. Gi·ªè h√†ng hi·ªán c√≥ ${cart.items.length} lo·∫°i s·∫£n ph·∫©m.`;
  }

  generateProductSelectionOptions(searchResults, query) {
    const productList = searchResults.slice(0, 3).map((result, index) => {
      const p = result.metadata;
      return `${index + 1}. **${p.name}** (${(p.discountPrice || p.price).toLocaleString('vi-VN')}ƒë)`;
    }).join('\n');

    return `üí° T√¥i ƒë√£ th√™m s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t. N·∫øu b·∫°n mu·ªën s·∫£n ph·∫©m kh√°c, ƒë√¢y l√† v√†i l·ª±a ch·ªçn cho "${query}":\n${productList}\n\nB·∫°n c√≥ th·ªÉ y√™u c·∫ßu "th√™m s·ªë 2" ho·∫∑c "ƒë·ªïi sang s·∫£n ph·∫©m 3".`;
  }

  generateUncertaintyResponse(aiResult) {
    const userQuery = aiResult.analysis?.userQuery || "";
    return `ü§î T√¥i ch∆∞a hi·ªÉu r√µ y√™u c·∫ßu c·ªßa b·∫°n${userQuery ? ` v·ªÅ "${userQuery}"` : ''}. B·∫°n c√≥ th·ªÉ di·ªÖn ƒë·∫°t l·∫°i ƒë∆∞·ª£c kh√¥ng? V√≠ d·ª•: "mua 2 chu·ªôt gaming", "xem gi·ªè h√†ng".`;
  }

  fallbackResponse(query) {
    return `ü§ñ ƒê√£ c√≥ l·ªói x·∫£y ra khi AI ph√¢n t√≠ch c√¢u h·ªèi v·ªÅ gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i v·ªõi c√¢u h·ªèi c·ª• th·ªÉ h∆°n. V√≠ d·ª•: "Mua chu·ªôt gaming", "Xem gi·ªè h√†ng".`;
  }
}

module.exports = AISmartCartTool;
