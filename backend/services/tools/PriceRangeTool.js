const { StructuredTool } = require("@langchain/core/tools");
const { z } = require("zod");
const Product = require("../../models/productModel");
const Category = require("../../models/categoryModel");
const { formatProductFromDB, formatPrice } = require("../config/utils");

class PriceRangeTool extends StructuredTool {
  schema = z.object({
    minPrice: z.number().describe("Gi√° t·ªëi thi·ªÉu"),
    maxPrice: z.number().describe("Gi√° t·ªëi ƒëa"),
    categoryFilter: z.string().optional().describe("Danh m·ª•c ƒë·ªÉ l·ªçc"),
    limit: z
      .number()
      .optional()
      .default(10)
      .describe("S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ªëi ƒëa"),
  });

  name = "price_range_search";
  description =
    "T√¨m ki·∫øm s·∫£n ph·∫©m trong kho·∫£ng gi√°, c√≥ th·ªÉ k·∫øt h·ª£p v·ªõi l·ªçc theo danh m·ª•c";

  async getCategoryId(categoryName) {
    try {
      const category = await Category.findOne({
        name: { $regex: categoryName, $options: "i" },
      });
      return category ? category._id : null;
    } catch (error) {
      return null;
    }
  }

  async _call(input) {
    try {
      const categoryId = input.categoryFilter
        ? await this.getCategoryId(input.categoryFilter)
        : null;

      const products = await Product.find({
        price: { $gte: input.minPrice, $lte: input.maxPrice },
        ...(categoryId && { category: categoryId }),
      })
        .populate("category", "name")
        .sort({ price: 1 })
        .limit(input.limit || 10);

      if (products.length === 0) {
        return `‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o trong kho·∫£ng gi√° ${formatPrice(
          input.minPrice
        )} - ${formatPrice(input.maxPrice)} VND.`;
      }

      const productList = products
        .map((product) => formatProductFromDB(product))
        .join("\n\n");

      const priceRangeFormatted = `${formatPrice(
        input.minPrice
      )} - ${formatPrice(input.maxPrice)} VND`;

      return `üí∞ **S·∫£n ph·∫©m trong kho·∫£ng gi√° ${priceRangeFormatted}:**\n\n${productList}\n\nüìä T√¨m th·∫•y ${products.length} s·∫£n ph·∫©m.`;
    } catch (error) {
      console.error("Error in price range tool:", error);
      return "‚ùå L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m theo gi√°.";
    }
  }
}

module.exports = PriceRangeTool;
