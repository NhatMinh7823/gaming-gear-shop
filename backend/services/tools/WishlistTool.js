const { StructuredTool } = require("langchain/tools");
const { z } = require("zod");
const User = require("../../models/userModel");
const Product = require("../../models/productModel"); // Ensure Product model is registered

/**
 * WishlistTool - Tool for accessing user's wishlist to provide personalized recommendations
 */
class WishlistTool extends StructuredTool {
  constructor(userContext = null) {
    super();
    this.name = "wishlist_tool";
    this.description =
      "Get user's wishlist to provide personalized product recommendations. Only use when user is authenticated (userId provided).";
    this.userContext = userContext;
    this.debugMode = process.env.CHATBOT_DEBUG === "true";
    this.schema = z.object({
      action: z
        .enum(["get_wishlist", "get_recommendations"])
        .describe(
          "Action to perform: get_wishlist to see items, get_recommendations for similar products"
        ),
    });
  }

  log(message, ...args) {
    if (this.debugMode) {
      console.log(`[WishlistTool] ${message}`, ...args);
    }
  }

  logError(message, ...args) {
    console.error(`[WishlistTool ERROR] ${message}`, ...args);
  }

  async _call({ action }) {
    try {
      this.log("üîç WishlistTool._call started");
      this.log("üîç Action:", action);
      this.log("üîç UserContext exists:", !!this.userContext);

      if (this.userContext) {
        this.log(
          "üîç UserContext methods:",
          Object.getOwnPropertyNames(Object.getPrototypeOf(this.userContext))
        );
        this.log(
          "üîç Current userId in userContext:",
          this.userContext.currentUserId
        );
      }

      // Get userId from context
      const userId = this.userContext ? this.userContext.getUserId() : null;

      this.log("üîç WishlistTool called with action:", action);
      this.log("üîç UserContext exists:", !!this.userContext);
      this.log("üîç UserId from context:", userId);

      if (!userId) {
        this.log("‚ùå WishlistTool: No userId found in context");
        return "User not authenticated. Cannot access wishlist. Ask user to login for personalized recommendations.";
      }

      // Find user and populate wishlist
      const user = await User.findById(userId).populate({
        path: "wishlist",
        select:
          "name price discountPrice brand category specifications features averageRating images",
        populate: {
          path: "category",
          select: "name",
        },
      });

      if (!user) {
        return "User not found.";
      }

      const wishlist = user.wishlist || [];

      if (action === "get_wishlist") {
        if (wishlist.length === 0) {
          return `${user.name} ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong wishlist. B·∫°n c√≥ th·ªÉ t∆∞ v·∫•n c√°c s·∫£n ph·∫©m ph·ªï bi·∫øn ho·∫∑c h·ªèi th√™m v·ªÅ nhu c·∫ßu c·ªßa h·ªç.`;
        }

        const wishlistInfo = wishlist.map((product) => ({
          name: product.name,
          price: product.price,
          discountPrice: product.discountPrice,
          brand: product.brand,
          category: product.category?.name || "Kh√¥ng r√µ",
          rating: product.averageRating || 0,
          features: product.features?.slice(0, 3) || [],
        }));

        return `Wishlist c·ªßa ${user.name} c√≥ ${wishlist.length} s·∫£n ph·∫©m:
${wishlistInfo
  .map(
    (item, index) =>
      `${index + 1}. ${item.name} - ${item.brand}
   Gi√°: ${
     item.discountPrice
       ? `${item.discountPrice.toLocaleString(
           "vi-VN"
         )}ƒë (gi·∫£m t·ª´ ${item.price.toLocaleString("vi-VN")}ƒë)`
       : `${item.price.toLocaleString("vi-VN")}ƒë`
   }
   Danh m·ª•c: ${item.category}
   ƒê√°nh gi√°: ${item.rating}/5 ‚≠ê
   ${item.features.length > 0 ? `T√≠nh nƒÉng: ${item.features.join(", ")}` : ""}`
  )
  .join("\n\n")}

B·∫°n c√≥ th·ªÉ t∆∞ v·∫•n c√°c s·∫£n ph·∫©m t∆∞∆°ng t·ª± ho·∫∑c b·ªï sung cho wishlist n√†y.`;
      }

      if (action === "get_recommendations") {
        if (wishlist.length === 0) {
          return `${user.name} ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong wishlist ƒë·ªÉ ƒë∆∞a ra g·ª£i √Ω t∆∞∆°ng t·ª±. H√£y h·ªèi v·ªÅ nhu c·∫ßu c·ªßa h·ªç ƒë·ªÉ t∆∞ v·∫•n ph√π h·ª£p.`;
        }

        // Analyze wishlist patterns
        const categories = [
          ...new Set(
            wishlist.map((item) => item.category?.name).filter(Boolean)
          ),
        ];
        const brands = [
          ...new Set(wishlist.map((item) => item.brand).filter(Boolean)),
        ];
        const priceRanges = wishlist.map(
          (item) => item.discountPrice || item.price
        );
        const avgPrice =
          priceRanges.length > 0
            ? priceRanges.reduce((a, b) => a + b, 0) / priceRanges.length
            : 0;
        const minPrice = Math.min(...priceRanges);
        const maxPrice = Math.max(...priceRanges);

        return `D·ª±a tr√™n wishlist c·ªßa ${user.name}, t√¥i th·∫•y h·ªç quan t√¢m ƒë·∫øn:
- Danh m·ª•c: ${categories.join(", ") || "ƒêa d·∫°ng"}
- Th∆∞∆°ng hi·ªáu y√™u th√≠ch: ${brands.join(", ") || "ƒêa d·∫°ng"}
- M·ª©c gi√° quan t√¢m: ${minPrice.toLocaleString(
          "vi-VN"
        )}ƒë - ${maxPrice.toLocaleString(
          "vi-VN"
        )}ƒë (trung b√¨nh: ${avgPrice.toLocaleString("vi-VN")}ƒë)
- T·ªïng ${wishlist.length} s·∫£n ph·∫©m trong wishlist

G·ª£i √Ω: T∆∞ v·∫•n c√°c s·∫£n ph·∫©m trong c√°c danh m·ª•c n√†y, t·ª´ c√°c th∆∞∆°ng hi·ªáu t∆∞∆°ng t·ª±, v√† trong t·∫ßm gi√° ph√π h·ª£p. C√≥ th·ªÉ ƒë·ªÅ xu·∫•t combo/bundle ho·∫∑c ph·ª• ki·ªán ƒëi k√®m.`;
      }

      return "Invalid action specified.";
    } catch (error) {
      this.logError("Error in WishlistTool:", error);
      return `L·ªói khi truy c·∫≠p wishlist: ${error.message}`;
    }
  }
}

module.exports = WishlistTool;
