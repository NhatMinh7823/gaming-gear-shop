const { StructuredTool } = require("@langchain/core/tools");
const { z } = require("zod");
const { ChatGoogleGenerativeAI } = require("@langchain/google-genai");
const mongoose = require("mongoose");

// Import models and services
const Cart = require("../../../models/cartModel");
const User = require("../../../models/userModel");
const Order = require("../../../models/orderModel");
const Product = require("../../../models/productModel");
const InventoryValidator = require("./InventoryValidator");
const ghnService = require("../../ghnService");
const { llmConfig } = require("../../config/llmConfig");
const OrderMessageFormatter = require('./utils/OrderMessageFormatter');
const { DEFAULT_VALUES } = require("./utils/OrderConstants");

/**
 * AIOrderTool - An AI-driven, intelligent tool for managing the entire order process.
 * This tool simplifies the previous state-machine-based OrderTool by leveraging an LLM
 * to understand user intent and orchestrate the checkout flow.
 */
class AIOrderTool extends StructuredTool {
  constructor(userContext = null) {
    super();
    this.name = "ai_order_tool";
    this.description = this.getOptimizedDescription();
    this.userContext = userContext;
    this.llm = new ChatGoogleGenerativeAI(llmConfig);
    this.ghnService = ghnService;
    this.debugMode = process.env.CHATBOT_DEBUG === "true";

    this.schema = z.object({
      query: z.string().describe("User's natural language query about checkout, payment, shipping, order confirmation, or status checks."),
    });
  }

  getOptimizedDescription() {
    return `ü§ñ AI ORDER TOOL - Intelligent order management using Gemini for natural language understanding.

üõí **WHEN TO USE:**
- User wants to checkout or place an order: "thanh to√°n", "ƒë·∫∑t h√†ng", "checkout", "place order"
- User asks about shipping: "ph√≠ ship bao nhi√™u?", "giao h√†ng t·ªõi ƒë√¢u?"
- User wants to select payment method: "tr·∫£ b·∫±ng ti·ªÅn m·∫∑t", "thanh to√°n qua VNPay"
- User confirms the order: "ƒë·ªìng √Ω", "x√°c nh·∫≠n ƒë∆°n h√†ng"
- User wants to check order status: "ƒë∆°n h√†ng c·ªßa t√¥i sao r·ªìi?", "check my order"

üîç **AI CAPABILITIES:**
- Understands the entire checkout flow from a single query.
- Extracts key information like address, payment method from natural language.
- Can answer questions about shipping fees and delivery times.
- Handles order confirmation and status checks.
- Guides the user through the necessary steps if information is missing.

‚ö° **KEYWORDS:** ƒë·∫∑t h√†ng, thanh to√°n, checkout, order, mua, ship, giao h√†ng, ƒë·ªãa ch·ªâ, x√°c nh·∫≠n, tr·∫°ng th√°i.

Only works when the user is authenticated.`;
  }

  log(message, ...args) {
    if (this.debugMode) {
      console.log(`[AIOrderTool] ${message}`, ...args);
    }
  }

  async _call({ query }) {
    try {
      const userId = this.userContext ? this.userContext.getUserId() : null;
      if (!userId) {
        return "üîí ƒê·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng ƒë·∫∑t h√†ng, b·∫°n c·∫ßn ƒëƒÉng nh·∫≠p.";
      }

      this.log(`Processing order query: "${query}" for userId: ${userId}`);

      // Get current context (cart, user info)
      const context = await this.getOrderContext(userId);

      // Check if cart is null, and initialize it if necessary
      if (!context.cart) {
        context.cart = { items: [], totalPrice: 0 };
      }

      // If cart is empty and user wants to checkout, guide them.
      if (context.cart.items.length === 0 && query.match(/thanh to√°n|ƒë·∫∑t h√†ng|checkout/i)) {
        return `üõí **GI·ªé H√ÄNG TR·ªêNG**
        
B·∫°n ch∆∞a c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ ƒë·∫∑t h√†ng. H√£y th√™m s·∫£n ph·∫©m v√†o gi·ªè tr∆∞·ªõc nh√©!

üîç **G·ª£i √Ω:**
‚Ä¢ "T√¨m laptop gaming"
‚Ä¢ "Mua chu·ªôt Logitech"`;
      }

      const aiPrompt = this.createOrderAIPrompt(query, context);
      this.log("Sending query to Gemini AI for order analysis...");
      const aiResponse = await this.llm.invoke(aiPrompt);
      
      let aiResult;
      try {
        const jsonMatch = aiResponse.content.match(/\{[\s\S]*\}/);
        if (!jsonMatch) throw new Error("No JSON found in AI response");
        aiResult = JSON.parse(jsonMatch[0]);
      } catch (parseError) {
        this.log("AI JSON parsing error:", parseError, "Response was:", aiResponse.content);
        return "ü§ñ R·∫•t ti·∫øc, t√¥i g·∫∑p s·ª± c·ªë khi ph√¢n t√≠ch y√™u c·∫ßu. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i v·ªõi c√¢u h·ªèi ƒë∆°n gi·∫£n h∆°n kh√¥ng?";
      }

      this.log("AI Result:", JSON.stringify(aiResult, null, 2));
      return await this.executeAIAction(aiResult, userId, context);

    } catch (error) {
      this.log("Error in AIOrderTool:", error);
      return `‚ùå L·ªói x·ª≠ l√Ω ƒë∆°n h√†ng: ${error.message}`;
    }
  }

  async getOrderContext(userId) {
    const cart = await Cart.findOne({ user: userId }).populate('items.product');
    const user = await User.findById(userId);
    const recentOrders = await Order.find({ user: userId }).sort({ createdAt: -1 }).limit(5);

    return {
      user: {
        name: user.name,
        email: user.email,
        address: user.address ? {
          street: user.address.street,
          ward: user.address.ward?.name,
          district: user.address.district?.name,
          province: user.address.province?.name,
        } : null,
      },
      cart: cart, // Pass the entire populated cart object
      recentOrders: recentOrders.map(o => ({ id: o._id.toString(), status: o.status, total: o.totalPrice }))
    };
  }

  createOrderAIPrompt(query, context) {
    // Adjust the context for the AI to only include necessary product details
    const aiContextCart = {
      itemCount: context.cart ? context.cart.items.length : 0,
      totalPrice: context.cart ? context.cart.totalPrice : 0,
      items: context.cart ? context.cart.items.map(item => ({
        name: item.name,
        quantity: item.quantity,
        price: item.price,
        stock: item.product ? item.product.stock : 0, // Ensure stock is accessed safely
      })) : [],
    };

    return `B·∫°n l√† AI chuy√™n gia x·ª≠ l√Ω ƒë∆°n h√†ng th√¥ng minh cho m·ªôt c·ª≠a h√†ng gaming gear. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch y√™u c·∫ßu c·ªßa kh√°ch h√†ng v√† ƒëi·ªÅu ph·ªëi quy tr√¨nh ƒë·∫∑t h√†ng m·ªôt c√°ch t·ª± nhi√™n.

**B·ªêI C·∫¢NH HI·ªÜN T·∫†I:**
${JSON.stringify({ ...context, cart: aiContextCart }, null, 2)}

**Y√äU C·∫¶U C·ª¶A KH√ÅCH H√ÄNG:** "${query}"

**NHI·ªÜM V·ª§:**
1.  Ph√¢n t√≠ch √Ω ƒë·ªãnh c·ªßa kh√°ch h√†ng (mu·ªën thanh to√°n, h·ªèi ph√≠ ship, x√°c nh·∫≠n ƒë∆°n, hay ki·ªÉm tra ƒë∆°n h√†ng?).
2.  X√°c ƒë·ªãnh h√†nh ƒë·ªông (action) c·∫ßn th·ª±c hi·ªán.
3.  Tr√≠ch xu·∫•t th√¥ng tin c·∫ßn thi·∫øt (ƒë·ªãa ch·ªâ, ph∆∞∆°ng th·ª©c thanh to√°n, m√£ ƒë∆°n h√†ng).
4.  N·∫øu thi·∫øu th√¥ng tin, h√£y ƒë·∫∑t c√¢u h·ªèi ƒë·ªÉ l√†m r√µ.

**C√ÅC H√ÄNH ƒê·ªòNG (ACTION) C√ì TH·ªÇ TH·ª∞C HI·ªÜN:**
-   **start_checkout**: B·∫Øt ƒë·∫ßu quy tr√¨nh thanh to√°n. Ki·ªÉm tra gi·ªè h√†ng v√† t·ªìn kho.
-   **calculate_shipping**: T√≠nh ph√≠ v·∫≠n chuy·ªÉn d·ª±a tr√™n ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh.
-   **select_payment_method**: Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n (COD ho·∫∑c VNPay).
-   **confirm_order**: Ch·ªët ƒë∆°n h√†ng. Hi·ªÉn th·ªã t√≥m t·∫Øt cu·ªëi c√πng v√† y√™u c·∫ßu x√°c nh·∫≠n.
-   **check_order_status**: Ki·ªÉm tra tr·∫°ng th√°i c·ªßa m·ªôt ƒë∆°n h√†ng c·ª• th·ªÉ ho·∫∑c c√°c ƒë∆°n h√†ng g·∫ßn ƒë√¢y.
-   **answer_question**: Tr·∫£ l·ªùi c√°c c√¢u h·ªèi chung chung li√™n quan ƒë·∫øn ƒë·∫∑t h√†ng m√† kh√¥ng c·∫ßn h√†nh ƒë·ªông c·ª• th·ªÉ.

**QUY T·∫ÆC QUAN TR·ªåNG:**
-   **Tin t∆∞·ªüng v√†o gi·ªè h√†ng:** Lu√¥n gi·∫£ ƒë·ªãnh r·∫±ng c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng l√† ch√≠nh x√°c v√† ƒë√£ ƒë∆∞·ª£c ng∆∞·ªùi d√πng ho·∫∑c c√°c c√¥ng c·ª• kh√°c (nh∆∞ t√¨m ki·∫øm s·∫£n ph·∫©m r·∫ª nh·∫•t) l·ª±a ch·ªçn. ƒê·ª´ng ƒë·∫∑t c√¢u h·ªèi x√°c nh·∫≠n l·∫°i s·∫£n ph·∫©m trong gi·ªè h√†ng tr·ª´ khi ng∆∞·ªùi d√πng tr·ª±c ti·∫øp y√™u c·∫ßu thay ƒë·ªïi.
-   Lu√¥n ki·ªÉm tra t·ªìn kho tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu thanh to√°n.
-   N·∫øu ng∆∞·ªùi d√πng h·ªèi ph√≠ ship m√† ch∆∞a c√≥ ƒë·ªãa ch·ªâ, h√£y y√™u c·∫ßu h·ªç c·∫≠p nh·∫≠t h·ªì s∆°.
-   Quy tr√¨nh chu·∫©n: start_checkout -> calculate_shipping -> select_payment_method -> confirm_order.
-   Tuy nhi√™n, ng∆∞·ªùi d√πng c√≥ th·ªÉ th·ª±c hi·ªán kh√¥ng theo th·ª© t·ª±. V√≠ d·ª•: "Giao h√†ng t·ªõi ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh v√† thanh to√°n b·∫±ng COD". AI ph·∫£i hi·ªÉu v√† g·ªôp c√°c b∆∞·ªõc.

**ƒê·ªäNH D·∫†NG PH·∫¢N H·ªíI JSON (B·∫ÆT BU·ªòC):**
{
  "action": "t√™n_h√†nh_ƒë·ªông",
  "intent": "T√≥m t·∫Øt √Ω ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng",
  "confidence": "high/medium/low",
  "parameters": {
    "paymentMethod": "COD" | "VNPay" | null,
    "useDefaultAddress": true | false,
    "orderId": "m√£ ƒë∆°n h√†ng n·∫øu c√≥"
  },
  "response": {
    "message": "C√¢u tr·∫£ l·ªùi ho·∫∑c c√¢u h·ªèi cho ng∆∞·ªùi d√πng.",
    "reasoning": "Gi·∫£i th√≠ch ng·∫Øn g·ªçn t·∫°i sao AI ch·ªçn h√†nh ƒë·ªông n√†y."
  }
}

Ph√¢n t√≠ch v√† tr·∫£ v·ªÅ JSON h·ª£p l·ªá.`;
  }

  async executeAIAction(aiResult, userId, context) {
    const { action, parameters, response } = aiResult;
    this.log(`Executing AI action: ${action}`, parameters);

    switch (action) {
      case "start_checkout":
        return this.handleStartCheckout(userId, context, response);
      case "calculate_shipping":
        return this.handleCalculateShipping(userId, context, response);
      case "select_payment_method":
        return this.handleSelectPaymentMethod(userId, parameters, response);
      case "confirm_order":
        return this.handleConfirmOrder(userId, context, parameters, response);
      case "check_order_status":
        return this.handleCheckOrderStatus(userId, parameters, response);
      case "answer_question":
        return response.message || "T√¥i c√≥ th·ªÉ gi√∫p g√¨ kh√°c cho b·∫°n v·ªÅ vi·ªác ƒë·∫∑t h√†ng kh√¥ng?";
      default:
        this.log("Unknown AI action:", action);
        return "R·∫•t ti·∫øc, t√¥i ch∆∞a hi·ªÉu r√µ y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n v·ªÅ vi·ªác ƒë·∫∑t h√†ng ƒë∆∞·ª£c kh√¥ng?";
    }
  }

  // --- HANDLER FUNCTIONS ---

  async handleStartCheckout(userId, context, response) {
    // Logic from InitiateOrderStep
    this.log("Cart items before inventory validation:", JSON.stringify(context.cart.items.map(item => ({
      _id: item._id,
      product_id: item.product ? item.product._id : 'NOT_POPULATED',
      product_name: item.product ? item.product.name : item.name,
      quantity: item.quantity,
      isProductPopulated: !!item.product
    })), null, 2));

    const validation = await InventoryValidator.validateCartInventory(context.cart.items);
    if (!validation.success) {
      // For simplicity, we won't auto-fix here. We'll just report.
      return `‚ö†Ô∏è **V·∫§N ƒê·ªÄ V·ªöI GI·ªé H√ÄNG**\n\n${validation.summary.message}\n\nVui l√≤ng ƒëi·ªÅu ch·ªânh gi·ªè h√†ng c·ªßa b·∫°n tr∆∞·ªõc khi ti·∫øp t·ª•c.`;
    }
    
    // If validation is successful, ask the next logical question.
    return response.message || "Gi·ªè h√†ng c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng. B·∫°n mu·ªën giao h√†ng ƒë·∫øn ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh v√† t√≠nh ph√≠ v·∫≠n chuy·ªÉn ch·ª©?";
  }

  async handleCalculateShipping(userId, context, response) {
    // Full logic from CalculateShippingStep
    if (!context.user.address?.street) {
        return "üìç B·∫°n ch∆∞a c√≥ ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh. Vui l√≤ng c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ trong h·ªì s∆° c·ªßa b·∫°n tr∆∞·ªõc nh√©.";
    }

    const user = await User.findById(userId); // Need full user object for district/ward IDs

    try {
        const cart = context.cart;
        const totalWeight = cart.items.reduce((weight, item) => weight + ((item.product?.weight || DEFAULT_VALUES.DEFAULT_PRODUCT_WEIGHT) * item.quantity), 0);
        const totalValue = cart.totalPrice;

        const shippingRequest = {
            service_type_id: 2,
            to_district_id: user.address.district.id,
            to_ward_code: user.address.ward.code,
            weight: Math.max(totalWeight, DEFAULT_VALUES.MIN_WEIGHT),
            insurance_value: totalValue
        };

        this.log('Calculating shipping with GHN:', shippingRequest);
        const shippingResult = await this.ghnService.calculateShippingFee(shippingRequest);

        let shippingInfo;
        if (!shippingResult.success) {
            this.log('GHN API failed, using fallback shipping fee');
            shippingInfo = { fee: shippingResult.fallbackFee || DEFAULT_VALUES.DEFAULT_SHIPPING_FEE };
            return response.message || `R·∫•t ti·∫øc, kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi ƒë∆°n v·ªã v·∫≠n chuy·ªÉn. T·∫°m t√≠nh ph√≠ giao h√†ng m·∫∑c ƒë·ªãnh l√† ${shippingInfo.fee.toLocaleString('vi-VN')}ƒë. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng?`;
        } else {
            shippingInfo = { fee: shippingResult.data?.data?.service_fee || DEFAULT_VALUES.DEFAULT_SHIPPING_FEE };
            return response.message || `Ph√≠ v·∫≠n chuy·ªÉn t·ªõi ƒë·ªãa ch·ªâ c·ªßa b·∫°n l√† ${shippingInfo.fee.toLocaleString('vi-VN')}ƒë. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c thanh to√°n kh√¥ng?`;
        }
    } catch (error) {
        this.log("Error calculating shipping:", error);
        const fallbackFee = DEFAULT_VALUES.DEFAULT_SHIPPING_FEE;
        return `‚ùå L·ªói khi t√≠nh ph√≠ v·∫≠n chuy·ªÉn. S·ª≠ d·ª•ng ph√≠ m·∫∑c ƒë·ªãnh ${fallbackFee.toLocaleString('vi-VN')}ƒë. B·∫°n mu·ªën ti·∫øp t·ª•c ch·ª©?`;
    }
  }

  async handleSelectPaymentMethod(userId, parameters, response) {
    // Logic from SelectPaymentStep
    const { paymentMethod } = parameters;
    if (!paymentMethod) {
      return "B·∫°n mu·ªën thanh to√°n b·∫±ng COD (ti·ªÅn m·∫∑t) hay qua VNPay?";
    }
    return response.message || `ƒê√£ ch·ªçn thanh to√°n b·∫±ng ${paymentMethod}.`;
  }

  async handleConfirmOrder(userId, context, parameters, response) {
    // Full logic from ShowSummaryStep and ConfirmOrderStep
    try {
        const user = await User.findById(userId);
        const cart = await Cart.findOne({ user: userId }).populate('items.product');

        // 1. Final inventory check
        const finalValidation = await InventoryValidator.validateCartInventory(cart.items);
        if (!finalValidation.success) {
            return `‚ùå **THAY ƒê·ªîI T·ªíN KHO**\n\nC√≥ s·∫£n ph·∫©m trong gi·ªè h√†ng ƒë√£ thay ƒë·ªïi t√¨nh tr·∫°ng. ${finalValidation.summary.message}\n\nVui l√≤ng b·∫Øt ƒë·∫ßu l·∫°i quy tr√¨nh thanh to√°n.`;
        }

        // 2. Prepare order data (re-calculating shipping for accuracy)
        const shippingFee = (await this.ghnService.calculateShippingFee({
            service_type_id: 2,
            to_district_id: user.address.district.id,
            to_ward_code: user.address.ward.code,
            weight: Math.max(cart.items.reduce((w, i) => w + ((i.product?.weight || 100) * i.quantity), 0), 100),
            insurance_value: cart.totalPrice
        })).data?.data?.service_fee || DEFAULT_VALUES.DEFAULT_SHIPPING_FEE;

        const totalAmount = cart.totalPrice + shippingFee;

        const orderData = {
            user: userId,
            orderItems: cart.items.map(item => ({
                name: item.product.name,
                quantity: item.quantity,
                image: item.product.images?.[0]?.url || "",
                price: item.price,
                product: item.product._id
            })),
            shippingAddress: user.address,
            paymentMethod: parameters.paymentMethod || 'CashOnDelivery', // Default to COD
            shippingPrice: shippingFee,
            totalPrice: totalAmount,
            chatbotOrder: true,
            orderSource: 'chatbot' // Corrected to match enum in orderModel.js
        };

        // 3. Create order
        const order = await Order.create(orderData);

        // 4. Update product stock
        for (const item of cart.items) {
            await Product.updateOne({ _id: item.product._id }, {
                $inc: {
                    stock: -item.quantity,
                    sold: +item.quantity
                }
            });
        }

        // 5. Clear cart
        await Cart.findByIdAndDelete(cart._id);

        const orderNumber = order._id.toString().slice(-6).toUpperCase();
        
        // Lu√¥n tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng ƒë·ªÉ ƒë·∫£m b·∫£o chatbot nh·∫≠n bi·∫øt
        return `‚úÖ **ƒê·∫∂T H√ÄNG TH√ÄNH C√îNG!**\n\nM√£ ƒë∆°n h√†ng c·ªßa b·∫°n l√† **#${orderNumber}**.\nT·ªïng s·ªë ti·ªÅn: ${totalAmount.toLocaleString('vi-VN')}ƒë.\nC·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm!`;

    } catch (error) {
        this.log("Error confirming order:", error);
        return `‚ùå **L·ªñI T·∫†O ƒê∆†N H√ÄNG**\n\nC√≥ l·ªói x·∫£y ra: ${error.message}. Vui l√≤ng th·ª≠ l·∫°i sau.`;
    }
  }

  async handleCheckOrderStatus(userId, parameters, response) {
    // Logic from CheckStatusStep
    const { orderId } = parameters;
    if (!orderId) {
      const recentOrders = await Order.find({ user: userId }).sort({ createdAt: -1 }).limit(5);
      if (recentOrders.length === 0) return "B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.";
      return OrderMessageFormatter.formatOrdersList(recentOrders);
    }

    const order = await Order.findById(orderId);
    if (!order || order.user.toString() !== userId) {
      return `‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ${orderId}.`;
    }
    return OrderMessageFormatter.formatOrderDetails(order);
  }
}

module.exports = AIOrderTool;
