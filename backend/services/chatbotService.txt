Khi c√≥ m·ªôt y√™u c·∫ßu t√¨m ki·∫øm m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ, quy tr√¨nh x·ª≠ l√Ω trong ChatbotService di·ªÖn ra nh∆∞ sau:

1. Ph√¢n t√≠ch intent: line 157
 H√†m detectWorkflowIntent(message) s·∫Ω ki·ªÉm tra n·ªôi dung tin nh·∫Øn ƒë·ªÉ x√°c ƒë·ªãnh intent. 
 N·∫øu ph√°t hi·ªán c√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn t√¨m ki·∫øm s·∫£n ph·∫©m (v√≠ d·ª•: "t√¨m", "g·ª£i √Ω", t√™n s·∫£n ph·∫©m, th∆∞∆°ng hi·ªáu...), intent "search" s·∫Ω ƒë∆∞·ª£c tr·∫£ v·ªÅ.

2. Kh·ªüi t·∫°o workflow:
 N·∫øu intent l√† "search" v√† ch∆∞a c√≥ workflow n√†o cho session hi·ªán t·∫°i, 
 initWorkflow c·ªßa WorkflowStateManager s·∫Ω ƒë∆∞·ª£c g·ªçi ƒë·ªÉ kh·ªüi t·∫°o workflow "search" cho session n√†y.

3. T·∫°o context workflow:
 L·∫•y tr·∫°ng th√°i workflow hi·ªán t·∫°i (n·∫øu c√≥) t·ª´ WorkflowStateManager ƒë·ªÉ truy·ªÅn v√†o context cho agent,
 bao g·ªìm lo·∫°i workflow, b∆∞·ªõc hi·ªán t·∫°i, th√¥ng tin b∆∞·ªõc, tr·∫°ng th√°i ti·∫øp t·ª•c...
 
4. G·ªçi agent th·ª±c thi:
 Agent (th√¥ng qua agentExecutor.invoke) s·∫Ω nh·∫≠n message, l·ªãch s·ª≠ chat, context workflow 
 v√† th·ª±c thi c√°c tool ph√π h·ª£p (v√≠ d·ª•: tool t√¨m ki·∫øm s·∫£n ph·∫©m).

5.C·∫≠p nh·∫≠t ti·∫øn tr√¨nh workflow:
 Sau khi agent tr·∫£ v·ªÅ k·∫øt qu·∫£ (bao g·ªìm output v√† c√°c b∆∞·ªõc trung gian/intermediateSteps), 
 updateWorkflowBasedOnResult s·∫Ω ƒë∆∞·ª£c g·ªçi ƒë·ªÉ c·∫≠p nh·∫≠t ti·∫øn tr√¨nh workflow d·ª±a tr√™n tool
 ƒë√£ d√πng (v√≠ d·ª•: n·∫øu tool "product_search" ƒë√£ ƒë∆∞·ª£c d√πng ·ªü b∆∞·ªõc 0, workflow s·∫Ω ƒë∆∞·ª£c advance
 sang b∆∞·ªõc ti·∫øp theo).

6.Tr·∫£ v·ªÅ k·∫øt qu·∫£:
 K·∫øt qu·∫£ t√¨m ki·∫øm s·∫£n ph·∫©m (output c·ªßa agent), tr·∫°ng th√°i workflow, c√°c tool ƒë√£ d√πng, 
 ti·∫øn tr√¨nh workflow, v√† c√°c th√¥ng tin ph√¢n t√≠ch s·∫Ω ƒë∆∞·ª£c tr·∫£ v·ªÅ cho user.

---

Lines t∆∞∆°ng ·ª©ng v·ªõi t·ª´ng b∆∞·ªõc trong file chatbotService.js:

1. Ph√¢n t√≠ch intent:
- Line: 157
  const workflowIntent = this.detectWorkflowIntent(message);

2. Kh·ªüi t·∫°o workflow:
- Lines: 160‚Äì170
  let workflow = this.workflowStateManager.getWorkflowState(actualSessionId);
  // ...
  if (workflowIntent && !workflow) {
    workflow = this.workflowStateManager.initWorkflow(
      actualSessionId,
      workflowIntent,
      {
        originalMessage: message,
        userId: userId,
      }
    );
    this.log(`üéØ Started new ${workflowIntent} workflow`);
  }

3. T·∫°o context workflow:
- Lines: 211‚Äì218
  const workflowContext = workflow
    ? {
        currentWorkflow: workflow.type,
        currentStep: workflow.currentStep,
        stepInfo:
          this.workflowStateManager.getCurrentStepInfo(actualSessionId),
        shouldContinue:
          this.workflowStateManager.shouldContinueWorkflow(actualSessionId),
      }
    : {};

4. G·ªçi agent th·ª±c thi:
- Lines: 220‚Äì227
  const agentStartTime = Date.now();
  const result = await agentExecutor.invoke({
    input: message,
    chat_history: previousMessages,
    workflow_context: workflowContext,
    session_id: actualSessionId,
  });

5. C·∫≠p nh·∫≠t ti·∫øn tr√¨nh workflow:
- Lines: 250‚Äì254
  if (workflow || workflowIntent) {
    this.updateWorkflowBasedOnResult(actualSessionId, result, toolsUsed);
    workflow = this.workflowStateManager.getWorkflowState(actualSessionId);
  }

6. Tr·∫£ v·ªÅ k·∫øt qu·∫£:
- Lines: 262‚Äì281
  return {
    text:
      result.output ||
      "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n l√∫c n√†y.",
    sessionId: actualSessionId,
    intermediateSteps: result.intermediateSteps || [],
    toolsUsed: toolsUsed,
    workflowComplete: workflowComplete,
    workflow: workflowAnalytics,
    executionTime: totalDuration,
    agentExecutionTime: agentDuration,
    iterationsUsed: result.intermediateSteps?.length || 0,
    analytics: {
      workflowIntent: workflowIntent,
      hasActiveWorkflow: !!workflow,
      toolsExecuted: toolsUsed.length,
      workflowProgress: workflowProgress,
    },
  };

B·∫°n c√≥ th·ªÉ ƒë·ªëi chi·∫øu t·ª´ng b∆∞·ªõc v·ªõi c√°c d√≤ng code tr√™n ƒë·ªÉ hi·ªÉu r√µ quy tr√¨nh x·ª≠ l√Ω t√¨m ki·∫øm s·∫£n ph·∫©m trong ChatbotService.
